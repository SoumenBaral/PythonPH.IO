OOP:
1) Class
2) Object
3) Methods
4) Inheritance
5) Encapsulation
6) Polymorphism
7) Abstraction


========================================================================================

1-> Class : Ans: A class is a blueprint or template for creating objects. 

========================================================================================

2-> Object: An object is called an instance of a class. For example,
 suppose Bike is a class then we can create objects like bike1 , bike2 ,
 etc from the class. 

========================================================================================

3-> Methods: Methods are functions that are associated with an object or a class.

========================================================================================
4-> Inheritance: Inheritance is a fundamental concept in object-oriented programming
 (OOP) that allows you to create new classes (subclasses or derived classes) based 
 on existing classes (superclasses or base classes).

 Type of Inheritance:

I) Single Inheritance
II) Multiple  Inheritance
III) Multilevel Inheritance
IV) Hierarchical Inheritance
V) Hybrid Inheritance

I.Single Inheritance:
---------------------
class parent:
    pass
class child(parent):
    pass

II.Multiple Inheritance:
------------------------

class parent1:
    pass
class parent2:
    pass
class child(parent1,parent2)
    pass

III.Multilevel:
---------------

class grandPa:
    pass
class father(grandPa):
    pass
class Child(father):
    pass


IV.Hierarchical Inheritance:
---------------------------

class parent:
    pass

class child1(parent):
    pass

class child2(parent):
    pass

V. Hybrid Inheritance:
-----------------------

class A:
    pass
class B(A):
    pass
class c(B):
    pass
class D(B,c)

========================================================================================

5.Encapsulation : Data and Methods are building in a Single Unit 

        Encapsulation = Single Unit(Data + Methods)

Two main types of encapsulation:
I) Public Access (No Encapsulation)
II) Private Access (Encapsulation)

========================================================================================

6-> Polymorphism
Ans: The term "polymorphism" in computer science and mathematics is composed of 
two Greek words:

Poly: "Poly" means "many" or "multiple."
Morphis: "Morphis" comes from "morphe," which means "form" or "shape."
When combined, "polymorphism" roughly translates to "many forms" or "multiple shapes."

I) Compile-Time Polymorphism (Static Binding): [Python dot support it]
Compile-time polymorphism, also known as static polymorphism, occurs when the decision
about which method or function to call is made at compile-time (before the program is 
run).

II)Run-Time Polymorphism (Dynamic Binding):

Run-time polymorphism, also known as dynamic polymorphism, occurs when the decision 
about which method or function to call is made at run-time
(while the program is executing).


========================================================================================
7-> Abstraction:
Abstraction is one of the fundamental principles of object-oriented programming (OOP) that involves hiding complex implementation details and showing only the necessary features of an object.

Abstract Classes:
-------------------------------

from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius ** 2